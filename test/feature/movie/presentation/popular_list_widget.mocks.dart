// Mocks generated by Mockito 5.4.5 from annotations
// in tmdb_movie_app/test/feature/movie/presentation/popular_list_widget.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tmdb_movie_app/core/imports.dart' as _i8;
import 'package:tmdb_movie_app/features/movies/domain/entities/movie.dart'
    as _i5;
import 'package:tmdb_movie_app/features/movies/domain/usecases/get_popular_movies.dart'
    as _i2;
import 'package:tmdb_movie_app/features/movies/presentation/bloc/movie_bloc/movie_event.dart'
    as _i7;
import 'package:tmdb_movie_app/features/movies/presentation/bloc/movie_bloc/movie_state.dart'
    as _i3;
import 'package:tmdb_movie_app/features/movies/presentation/bloc/movie_bloc/popular_movie_bloc.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetPopularMovies_0 extends _i1.SmartFake
    implements _i2.GetPopularMovies {
  _FakeGetPopularMovies_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovieState_1 extends _i1.SmartFake implements _i3.MovieState {
  _FakeMovieState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PopularMovieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMovieBloc extends _i1.Mock implements _i4.PopularMovieBloc {
  MockPopularMovieBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetPopularMovies get getPopularMovies =>
      (super.noSuchMethod(
            Invocation.getter(#getPopularMovies),
            returnValue: _FakeGetPopularMovies_0(
              this,
              Invocation.getter(#getPopularMovies),
            ),
          )
          as _i2.GetPopularMovies);

  @override
  int get currentPage =>
      (super.noSuchMethod(Invocation.getter(#currentPage), returnValue: 0)
          as int);

  @override
  set currentPage(int? _currentPage) => super.noSuchMethod(
    Invocation.setter(#currentPage, _currentPage),
    returnValueForMissingStub: null,
  );

  @override
  List<_i5.Movie> get allMovies =>
      (super.noSuchMethod(
            Invocation.getter(#allMovies),
            returnValue: <_i5.Movie>[],
          )
          as List<_i5.Movie>);

  @override
  set allMovies(List<_i5.Movie>? _allMovies) => super.noSuchMethod(
    Invocation.setter(#allMovies, _allMovies),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasReachedMax =>
      (super.noSuchMethod(Invocation.getter(#hasReachedMax), returnValue: false)
          as bool);

  @override
  set hasReachedMax(bool? _hasReachedMax) => super.noSuchMethod(
    Invocation.setter(#hasReachedMax, _hasReachedMax),
    returnValueForMissingStub: null,
  );

  @override
  bool get isViewAll =>
      (super.noSuchMethod(Invocation.getter(#isViewAll), returnValue: false)
          as bool);

  @override
  set isViewAll(bool? _isViewAll) => super.noSuchMethod(
    Invocation.setter(#isViewAll, _isViewAll),
    returnValueForMissingStub: null,
  );

  @override
  int get maxCount =>
      (super.noSuchMethod(Invocation.getter(#maxCount), returnValue: 0) as int);

  @override
  set maxCount(int? _maxCount) => super.noSuchMethod(
    Invocation.setter(#maxCount, _maxCount),
    returnValueForMissingStub: null,
  );

  @override
  _i3.MovieState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMovieState_1(this, Invocation.getter(#state)),
          )
          as _i3.MovieState);

  @override
  _i6.Stream<_i3.MovieState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i3.MovieState>.empty(),
          )
          as _i6.Stream<_i3.MovieState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void switchToViewAll(bool? isViewAllScreen) => super.noSuchMethod(
    Invocation.method(#switchToViewAll, [isViewAllScreen]),
    returnValueForMissingStub: null,
  );

  @override
  void add(_i7.MovieEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i7.MovieEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.MovieState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i7.MovieEvent>(
    _i8.EventHandler<E, _i3.MovieState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i8.Transition<_i7.MovieEvent, _i3.MovieState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onChange(_i8.Change<_i3.MovieState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
